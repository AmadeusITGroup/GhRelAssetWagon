name: Enhanced Release with Attestations

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to create attestations for'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (validate only, do not publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write
  attestations: write
  security-events: write

jobs:
  build-and-attest:
    runs-on: ubuntu-latest
    outputs:
      artifact-hashes: ${{ steps.hash.outputs.hashes }}
      sbom-hash: ${{ steps.sbom-hash.outputs.hash }}
      total_tests: ${{ steps.test-results.outputs.total_tests }}
      passed_tests: ${{ steps.test-results.outputs.passed_tests }}
      failed_tests: ${{ steps.test-results.outputs.failed_tests }}
      success_rate: ${{ steps.test-results.outputs.success_rate }}
      instruction_coverage: ${{ steps.test-results.outputs.instruction_coverage }}
      branch_coverage: ${{ steps.test-results.outputs.branch_coverage }}
      line_coverage: ${{ steps.test-results.outputs.line_coverage }}
      
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="0.0.1-SNAPSHOT"
        fi
        
        # Clean version (remove 'v' prefix if present)
        VERSION=$(echo "$VERSION" | sed 's/^v//')
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Check semantic version format (X.Y.Z or X.Y.Z-qualifier)
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-qualifier"
          exit 1
        fi
        
        echo "✅ Version format is valid: $VERSION"
        
    - name: Update Maven version
      run: |
        echo "Updating Maven version to: ${{ steps.version.outputs.version }}"
        mvn -B versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false
        
        # Verify version was set correctly
        ACTUAL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Maven version set to: $ACTUAL_VERSION"
        
        if [ "$ACTUAL_VERSION" != "${{ steps.version.outputs.version }}" ]; then
          echo "❌ Version mismatch: expected ${{ steps.version.outputs.version }}, got $ACTUAL_VERSION"
          exit 1
        fi
        
        echo "✅ Maven version updated successfully"
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        settings-path: ${{ github.workspace }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import 2>&1 | sed 's/<[^>]*>/<***@***.***>/g'
        KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\).*/\1/')
        echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
        FINGERPRINT=$(gpg --list-secret-keys --with-colons --fingerprint | grep fpr | head -1 | cut -d: -f10)
        echo "$FINGERPRINT:6:" | gpg --batch --import-ownertrust
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        echo "no-tty" >> ~/.gnupg/gpg.conf
        echo "default-key $KEY_ID" >> ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg.conf
        
    - name: Build, test, and package artifacts with GPG signing
      env:
        GH_RELEASE_ASSET_TOKEN: test_token
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "🚀 Running Maven build with tests and GPG signing..."
        mvn clean verify -Dgpg.skip=false -Dgpg.passphrase="${GPG_PASSPHRASE}"
        echo "✅ Build completed with signed artifacts"
        
    - name: Verify artifact versions
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Checking for artifacts with version: $VERSION"
        
        # Check main JAR
        [ -f "target/ghrelasset-wagon-${VERSION}.jar" ] || { echo "❌ Main JAR not found"; exit 1; }
        
        # Check sources JAR
        [ -f "target/ghrelasset-wagon-${VERSION}-sources.jar" ] || { echo "❌ Sources JAR not found"; exit 1; }
        
        # Check javadoc JAR
        [ -f "target/ghrelasset-wagon-${VERSION}-javadoc.jar" ] || { echo "❌ Javadoc JAR not found"; exit 1; }
        
        # Check POM file
        [ -f "target/ghrelasset-wagon-${VERSION}.pom" ] || { echo "❌ POM file not found"; exit 1; }
        
        # List all generated artifacts
        echo "Generated artifacts:"
        ls -la target/ghrelasset-wagon-${VERSION}*
        
        echo "✅ All required artifacts present with correct version"
        
    - name: Validate for Maven Central
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        if [[ "$VERSION" == *"-SNAPSHOT" ]]; then
          echo "❌ Cannot deploy SNAPSHOT version to Maven Central"
          exit 1
        fi
        
        echo "✅ Version is suitable for Maven Central: $VERSION"
        
    - name: Generate comprehensive SBOM
      uses: anchore/sbom-action@v0
      with:
        path: .
        format: spdx-json
        output-file: sbom.spdx.json
        upload-artifact: false
        
    - name: Generate CycloneDX SBOM
      run: |
        # Copy the generated SBOM from Maven build output
        if [ -f "target/sbom.cyclonedx.json" ]; then
          cp target/sbom.cyclonedx.json sbom.cyclonedx.json
          echo "✅ CycloneDX SBOM copied from Maven build output"
        else
          echo "❌ CycloneDX SBOM not found in target/"
          exit 1
        fi
        
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        
    - name: Generate vulnerability report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'vulnerability-report.json'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        
    - name: Sign additional artifacts
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Sign additional files that Maven doesn't handle
        for file in sbom.spdx.json sbom.cyclonedx.json vulnerability-report.json build-metadata.json; do
          if [ -f "$file" ]; then
            gpg --batch --yes --pinentry-mode loopback \
              --passphrase "${GPG_PASSPHRASE}" \
              --armor --detach-sign "$file"
            echo "✅ Signed $file"
          fi
        done
        
    - name: Parse test results and coverage
      id: test-results
      run: |
        # Parse test results
        if [ -f "target/surefire-reports/TEST-"*.xml ]; then
          TOTAL_TESTS=$(xmllint --xpath "sum(//testsuite/@tests)" target/surefire-reports/TEST-*.xml 2>/dev/null || echo "0")
          FAILURES=$(xmllint --xpath "sum(//testsuite/@failures)" target/surefire-reports/TEST-*.xml 2>/dev/null || echo "0")
          ERRORS=$(xmllint --xpath "sum(//testsuite/@errors)" target/surefire-reports/TEST-*.xml 2>/dev/null || echo "0")
          SKIPPED=$(xmllint --xpath "sum(//testsuite/@skipped)" target/surefire-reports/TEST-*.xml 2>/dev/null || echo "0")
          PASSED=$((TOTAL_TESTS - FAILURES - ERRORS - SKIPPED))
          
          if [ $TOTAL_TESTS -gt 0 ]; then
            SUCCESS_RATE=$(echo "scale=1; $PASSED * 100 / $TOTAL_TESTS" | bc -l)
          else
            SUCCESS_RATE="0.0"
          fi
          
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILURES" >> $GITHUB_OUTPUT
          echo "error_tests=$ERRORS" >> $GITHUB_OUTPUT
          echo "skipped_tests=$SKIPPED" >> $GITHUB_OUTPUT
          echo "success_rate=${SUCCESS_RATE}%" >> $GITHUB_OUTPUT
        else
          echo "total_tests=0" >> $GITHUB_OUTPUT
          echo "passed_tests=0" >> $GITHUB_OUTPUT
          echo "failed_tests=0" >> $GITHUB_OUTPUT
          echo "error_tests=0" >> $GITHUB_OUTPUT
          echo "skipped_tests=0" >> $GITHUB_OUTPUT
          echo "success_rate=0%" >> $GITHUB_OUTPUT
        fi
        
        # Parse JaCoCo coverage results
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          INSTRUCTION_COVERED=$(grep -o '<counter type="INSTRUCTION" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/' || echo "0")
          INSTRUCTION_MISSED=$(grep -o '<counter type="INSTRUCTION" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/' || echo "0")
          BRANCH_COVERED=$(grep -o '<counter type="BRANCH" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/' || echo "0")
          BRANCH_MISSED=$(grep -o '<counter type="BRANCH" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/' || echo "0")
          LINE_COVERED=$(grep -o '<counter type="LINE" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/' || echo "0")
          LINE_MISSED=$(grep -o '<counter type="LINE" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/' || echo "0")
          
          INSTRUCTION_TOTAL=$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))
          BRANCH_TOTAL=$((BRANCH_COVERED + BRANCH_MISSED))
          LINE_TOTAL=$((LINE_COVERED + LINE_MISSED))
          
          if [ $INSTRUCTION_TOTAL -gt 0 ]; then
            INSTRUCTION_PCT=$(echo "scale=1; $INSTRUCTION_COVERED * 100 / $INSTRUCTION_TOTAL" | bc -l)
          else
            INSTRUCTION_PCT="0.0"
          fi
          
          if [ $BRANCH_TOTAL -gt 0 ]; then
            BRANCH_PCT=$(echo "scale=1; $BRANCH_COVERED * 100 / $BRANCH_TOTAL" | bc -l)
          else
            BRANCH_PCT="0.0"
          fi
          
          if [ $LINE_TOTAL -gt 0 ]; then
            LINE_PCT=$(echo "scale=1; $LINE_COVERED * 100 / $LINE_TOTAL" | bc -l)
          else
            LINE_PCT="0.0"
          fi
          
          echo "instruction_coverage=${INSTRUCTION_PCT}%" >> $GITHUB_OUTPUT
          echo "branch_coverage=${BRANCH_PCT}%" >> $GITHUB_OUTPUT
          echo "line_coverage=${LINE_PCT}%" >> $GITHUB_OUTPUT
          echo "instruction_covered=$INSTRUCTION_COVERED" >> $GITHUB_OUTPUT
          echo "instruction_total=$INSTRUCTION_TOTAL" >> $GITHUB_OUTPUT
          echo "branch_covered=$BRANCH_COVERED" >> $GITHUB_OUTPUT
          echo "branch_total=$BRANCH_TOTAL" >> $GITHUB_OUTPUT
          echo "line_covered=$LINE_COVERED" >> $GITHUB_OUTPUT
          echo "line_total=$LINE_TOTAL" >> $GITHUB_OUTPUT
        else
          echo "instruction_coverage=0%" >> $GITHUB_OUTPUT
          echo "branch_coverage=0%" >> $GITHUB_OUTPUT
          echo "line_coverage=0%" >> $GITHUB_OUTPUT
          echo "instruction_covered=0" >> $GITHUB_OUTPUT
          echo "instruction_total=0" >> $GITHUB_OUTPUT
          echo "branch_covered=0" >> $GITHUB_OUTPUT
          echo "branch_total=0" >> $GITHUB_OUTPUT
          echo "line_covered=0" >> $GITHUB_OUTPUT
          echo "line_total=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Create comprehensive build metadata
      run: |
        cat > build-metadata.json << EOF
        {
          "build_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "git_commit": "${{ github.sha }}",
          "git_ref": "${{ github.ref }}",
          "workflow_run_id": "${{ github.run_id }}",
          "workflow_run_number": "${{ github.run_number }}",
          "runner_os": "${{ runner.os }}",
          "java_version": "17",
          "maven_version": "$(mvn --version | head -1 | cut -d' ' -f3)",
          "test_results": {
            "total_tests": "${{ steps.test-results.outputs.total_tests }}",
            "passed_tests": "${{ steps.test-results.outputs.passed_tests }}",
            "failed_tests": "${{ steps.test-results.outputs.failed_tests }}",
            "success_rate": "${{ steps.test-results.outputs.success_rate }}"
          },
          "code_coverage": {
            "instruction_coverage": "${{ steps.test-results.outputs.instruction_coverage }}",
            "branch_coverage": "${{ steps.test-results.outputs.branch_coverage }}",
            "line_coverage": "${{ steps.test-results.outputs.line_coverage }}"
          },
          "build_environment": {
            "github_actor": "${{ github.actor }}",
            "github_repository": "${{ github.repository }}",
            "github_event_name": "${{ github.event_name }}"
          }
        }
        EOF
        
    - name: Generate artifact hashes
      id: hash
      run: |
        echo "📝 Generating SHA256 hashes for all artifacts..."
        
        # Validate target directory exists
        if [ ! -d "target" ]; then
          echo "❌ Target directory not found"
          exit 1
        fi
        
        cd target
        
        # Validate required artifacts exist before hashing
        for file in ghrelasset-wagon-*.jar ghrelasset-wagon-*.pom; do
          if ! ls $file 1> /dev/null 2>&1; then
            echo "❌ Required artifact pattern $file not found"
            exit 1
          fi
        done
        
        # Create comprehensive hash file
        sha256sum *.jar *.pom *.asc 2>/dev/null > ../artifacts.sha256 || true
        
        # Generate individual hash files for each artifact
        for file in *.jar *.pom; do
          if [ -f "$file" ]; then
            sha256sum "$file" > "../${file}.sha256"
            echo "✅ Generated hash for $file"
          fi
        done
        
        # Create base64 encoded hashes for GitHub attestations
        hashes=$(sha256sum *.jar *.pom | base64 -w 0)
        echo "hashes=$hashes" >> $GITHUB_OUTPUT
        
        # List all generated files
        echo "Generated artifacts:"
        ls -la *.jar *.pom *.asc
        
    - name: Generate SBOM hash
      id: sbom-hash
      run: |
        sbom_hash=$(sha256sum sbom.spdx.json | cut -d' ' -f1)
        echo "hash=$sbom_hash" >> $GITHUB_OUTPUT
        echo "SBOM SHA256: $sbom_hash"
        
    - name: Generate release summary
      run: |
        echo "## 🚀 Release Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Build Information
        echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Timestamp | $(date -u +%Y-%m-%dT%H:%M:%SZ) |" >> $GITHUB_STEP_SUMMARY
        echo "| Git Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow Run | [${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Java Version | 17 |" >> $GITHUB_STEP_SUMMARY
        echo "| Maven Version | $(mvn --version | head -1 | cut -d' ' -f3) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test Results
        echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Total Tests | ${{ steps.test-results.outputs.total_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Passed | ${{ steps.test-results.outputs.passed_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Failed | ${{ steps.test-results.outputs.failed_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Errors | ${{ steps.test-results.outputs.error_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Skipped | ${{ steps.test-results.outputs.skipped_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Success Rate | ${{ steps.test-results.outputs.success_rate }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Code Coverage
        echo "### 📈 Code Coverage" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Type | Covered | Total | Percentage |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|---------|-------|------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Instructions | ${{ steps.test-results.outputs.instruction_covered }} | ${{ steps.test-results.outputs.instruction_total }} | ${{ steps.test-results.outputs.instruction_coverage }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branches | ${{ steps.test-results.outputs.branch_covered }} | ${{ steps.test-results.outputs.branch_total }} | ${{ steps.test-results.outputs.branch_coverage }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lines | ${{ steps.test-results.outputs.line_covered }} | ${{ steps.test-results.outputs.line_total }} | ${{ steps.test-results.outputs.line_coverage }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Security Attestations
        echo "### 🔒 Security Attestations" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SLSA Level 3 Provenance generated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SPDX SBOM: \`sbom.spdx.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ CycloneDX SBOM: \`sbom.cyclonedx.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ GPG signatures generated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SHA-256 checksums created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Artifacts
        echo "### 📦 Release Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "**Main Artifacts:**" >> $GITHUB_STEP_SUMMARY
        ls target/*.jar target/*.pom | while read file; do
          basename_file=$(basename "$file")
          size=$(stat -c%s "$file" | numfmt --to=iec)
          echo "- $basename_file ($size)" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Attestation Artifacts:**" >> $GITHUB_STEP_SUMMARY
        echo "- sbom.spdx.json - SPDX Software Bill of Materials" >> $GITHUB_STEP_SUMMARY
        echo "- sbom.cyclonedx.json - CycloneDX Software Bill of Materials" >> $GITHUB_STEP_SUMMARY
        echo "- vulnerability-report.json - Security vulnerability report" >> $GITHUB_STEP_SUMMARY
        echo "- build-metadata.json - Build environment metadata" >> $GITHUB_STEP_SUMMARY
        echo "- *.sha256 - SHA-256 checksums" >> $GITHUB_STEP_SUMMARY
        echo "- *.asc - GPG signatures" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: Create verification instructions
      run: |
        echo "# Artifact Verification Instructions" > VERIFICATION.md
        echo "" >> VERIFICATION.md
        echo "## GPG Signature Verification" >> VERIFICATION.md
        echo "gpg --verify ghrelasset-wagon-*.jar.asc ghrelasset-wagon-*.jar" >> VERIFICATION.md
        echo "" >> VERIFICATION.md
        echo "## SHA256 Hash Verification" >> VERIFICATION.md
        echo "sha256sum -c artifacts.sha256" >> VERIFICATION.md
        echo "" >> VERIFICATION.md
        echo "## SLSA Provenance Verification" >> VERIFICATION.md
        echo "slsa-verifier verify-artifact ghrelasset-wagon-*.jar --provenance-path *.intoto.jsonl --source-uri github.com/$GITHUB_REPOSITORY" >> VERIFICATION.md
        echo "" >> VERIFICATION.md
        echo "## SBOM Vulnerability Scanning" >> VERIFICATION.md
        echo "grype sbom:sbom.spdx.json" >> VERIFICATION.md
        
    - name: Generate GitHub Attestations
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: |
          target/*.jar
          target/*.pom
          sbom.spdx.json
          sbom.cyclonedx.json
          
    - name: Generate SBOM Attestation
      uses: actions/attest-sbom@v1
      with:
        subject-path: target/*.jar
        sbom-path: sbom.spdx.json
        
    - name: Upload attestation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: attestation-artifacts
        path: |
          target/ghrelasset-wagon-*.jar
          target/ghrelasset-wagon-*.pom
          target/ghrelasset-wagon-*.jar.asc
          target/ghrelasset-wagon-*.pom.asc
          ghrelasset-wagon-*.sha256
          artifacts.sha256
          sbom.spdx.json
          sbom.cyclonedx.json
          vulnerability-report.json
          build-metadata.json
          VERIFICATION.md
        if-no-files-found: error
        retention-days: 90
        
  slsa-provenance:
    needs: build-and-attest
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.build-and-attest.outputs.artifact-hashes }}"
      
  deploy-to-maven-central:
    needs: [build-and-attest, slsa-provenance]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        settings-path: ${{ github.workspace }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Determine version for deployment
      id: deploy-version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="0.0.1-SNAPSHOT"
        fi
        
        VERSION=$(echo "$VERSION" | sed 's/^v//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version for deployment: $VERSION"
        
    - name: Download attestation artifacts
      uses: actions/download-artifact@v4
      with:
        name: attestation-artifacts
        path: ./
        
    - name: Validate artifacts exist
      run: |
        VERSION="${{ steps.deploy-version.outputs.version }}"
        echo "📦 Validating required artifacts for version: $VERSION"
        
        # List target directory for diagnostics
        ls -la target || true
        
        # Validate that build artifacts for the computed release version are present
        [ -f "target/ghrelasset-wagon-${VERSION}.jar" ] || { echo "❌ Main JAR not found"; exit 1; }
        [ -f "target/ghrelasset-wagon-${VERSION}.pom" ] || { echo "❌ POM not found"; exit 1; }
        [ -f "target/ghrelasset-wagon-${VERSION}-sources.jar" ] || { echo "❌ Sources JAR not found"; exit 1; }
        [ -f "target/ghrelasset-wagon-${VERSION}-javadoc.jar" ] || { echo "❌ Javadoc JAR not found"; exit 1; }
        echo "✅ All required artifacts present"
        
    # - name: Deploy to Maven Central using pre-built artifacts
    #   env:
    #     MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
    #     MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
    #   run: |
    #     echo "🚀 Deploying pre-built artifacts to Maven Central..."
        
    #     # Function to deploy with retry logic
    #     deploy_with_retry() {
    #       local file="$1"
    #       local classifier="$2"
    #       local max_retries=3
    #       local retry_count=0
          
    #       while [ $retry_count -lt $max_retries ]; do
    #         echo "Deploying $file (attempt $((retry_count + 1))/$max_retries)..."
            
    #         if [ -z "$classifier" ]; then
    #           # Deploy main JAR with POM
    #           if mvn deploy:deploy-file \
    #             -Dfile="$file" \
    #             -DpomFile=target/ghrelasset-wagon-0.0.1.pom \
    #             -Durl=https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/ \
    #             -DrepositoryId=central \
    #             -s ${{ github.workspace }}/settings.xml; then
    #             echo "✅ Successfully deployed $file"
    #             return 0
    #           fi
    #         else
    #           # Deploy classified JAR
    #           if mvn deploy:deploy-file \
    #             -Dfile="$file" \
    #             -DgroupId=io.github.amadeusitgroup.maven.wagon \
    #             -DartifactId=ghrelasset-wagon \
    #             -Dversion=0.0.1 \
    #             -Dpackaging=jar \
    #             -Dclassifier="$classifier" \
    #             -Durl=https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/ \
    #             -DrepositoryId=central \
    #             -s ${{ github.workspace }}/settings.xml; then
    #             echo "✅ Successfully deployed $file"
    #             return 0
    #           fi
    #         fi
            
    #         retry_count=$((retry_count + 1))
    #         if [ $retry_count -lt $max_retries ]; then
    #           echo "⚠️ Deployment failed, retrying in 10 seconds..."
    #           sleep 10
    #         fi
    #       done
          
    #       echo "❌ Failed to deploy $file after $max_retries attempts"
    #       return 1
    #     }
        
    #     # Deploy artifacts with retry logic
    #     deploy_with_retry "target/ghrelasset-wagon-0.0.1.jar" "" || exit 1
    #     deploy_with_retry "target/ghrelasset-wagon-0.0.1-sources.jar" "sources" || exit 1
    #     deploy_with_retry "target/ghrelasset-wagon-0.0.1-javadoc.jar" "javadoc" || exit 1
        
    #     echo "✅ All artifacts deployed successfully"
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Create GPG directory and set permissions
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        
        # Import the GPG key (suppress output to avoid exposing email)
        echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import 2>&1 | sed 's/<[^>]*>/<***@***.***>/g'
        
        # List keys to verify import and get key ID (mask email for security)
        echo "Imported GPG keys:"
        gpg --list-secret-keys --keyid-format LONG | sed 's/<[^>]*>/<***@***.***>/g'
        
        # Get the key ID and fingerprint
        KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\).*/\1/')
        echo "Using GPG key ID: $KEY_ID"
        echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
        
        # Get the full fingerprint for trust import
        FINGERPRINT=$(gpg --list-secret-keys --with-colons --fingerprint | grep fpr | head -1 | cut -d: -f10)
        echo "GPG fingerprint: $FINGERPRINT"
        
        # Set ultimate trust for the imported key to avoid signature validation issues
        echo "$FINGERPRINT:6:" | gpg --batch --import-ownertrust
        
        # Verify key trust
        gpg --list-keys --with-colons | grep "^pub" | head -1
        
        # Configure GPG for non-interactive use
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        echo "no-tty" >> ~/.gnupg/gpg.conf
        echo "default-key $KEY_ID" >> ~/.gnupg/gpg.conf
        
        # Configure GPG agent
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "default-cache-ttl 86400" >> ~/.gnupg/gpg-agent.conf
        echo "max-cache-ttl 86400" >> ~/.gnupg/gpg-agent.conf
        
        # Set proper permissions
        chmod 600 ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg-agent.conf
        
        # Restart GPG agent
        gpg-connect-agent reloadagent /bye || true
        
        # Test signing with the exact same parameters Maven will use
        echo "test" > /tmp/test.txt
        gpg --detach-sign --armor --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --default-key "$KEY_ID" --output /tmp/test.asc /tmp/test.txt
        
        # Verify the test signature
        gpg --verify /tmp/test.asc /tmp/test.txt
        echo "GPG signing test successful - signature verified"
        
        # Export public key for verification (useful for debugging)
        gpg --armor --export "$KEY_ID" > /tmp/public_key.asc
        echo "Public key exported for verification"

    - name: Update Maven version for deployment
      run: |
        echo "Updating Maven version to: ${{ steps.deploy-version.outputs.version }}"
        mvn -B versions:set -DnewVersion=${{ steps.deploy-version.outputs.version }} -DgenerateBackupPoms=false
        
        # Verify version was set correctly
        ACTUAL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Maven version set to: $ACTUAL_VERSION"
        
        if [ "$ACTUAL_VERSION" != "${{ steps.deploy-version.outputs.version }}" ]; then
          echo "❌ Version mismatch: expected ${{ steps.deploy-version.outputs.version }}, got $ACTUAL_VERSION"
          exit 1
        fi
        
        echo "✅ Maven version updated successfully for deployment"

    - name: Deploy to Maven Central
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      run: |
        echo "🚀 Starting actual deployment to Maven Central..."
        echo "Deploying version: ${{ steps.deploy-version.outputs.version }}"
        
        # Deploy with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Deployment attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
          
          if mvn clean deploy -DskipTests -Dgpg.skip=false \
            -s ${{ github.workspace }}/settings.xml; then
            echo "✅ Deployment to Maven Central successful"
            break
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
            echo "⚠️ Deployment failed, retrying in 10 seconds..."
            sleep 10
          else
            echo "❌ Deployment failed after $MAX_RETRIES attempts"
            exit 1
          fi
        done
        echo "✅ Manual deployment completed successfully"    
  attach-to-release:
    needs: [build-and-attest, slsa-provenance, deploy-to-maven-central]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    
    steps:
    - name: Download attestation artifacts
      uses: actions/download-artifact@v4
      with:
        name: attestation-artifacts
        path: ./attestations/
        
    - name: Download SLSA provenance
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.slsa-provenance.outputs.provenance-name }}
        path: ./slsa/
        
    - name: Attach attestations to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          attestations/*.jar
          attestations/*.pom
          attestations/*.asc
          attestations/*.sha256
          attestations/sbom.spdx.json
          attestations/sbom.cyclonedx.json
          attestations/trivy-results.sarif
          attestations/vulnerability-report.json
          attestations/build-metadata.json
          slsa/*.intoto.jsonl
        body: |
          ## 🚀 Release Build Summary
          
          **Build Information:**
          - **Build Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **Git Commit:** ${{ github.sha }}
          - **Workflow Run:** [${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Java Version:** 17
          - **Maven Version:** $(mvn --version | head -1 | cut -d' ' -f3)
          
          ## 🧪 Test Results
          
          | Metric | Value |
          |--------|-------|
          | Total Tests | ${{ needs.build-and-attest.outputs.total_tests || 'N/A' }} |
          | Passed | ${{ needs.build-and-attest.outputs.passed_tests || 'N/A' }} |
          | Failed | ${{ needs.build-and-attest.outputs.failed_tests || 'N/A' }} |
          | Success Rate | ${{ needs.build-and-attest.outputs.success_rate || 'N/A' }} |
          
          ## 📈 Code Coverage
          
          | Coverage Type | Percentage |
          |---------------|------------|
          | Instructions | ${{ needs.build-and-attest.outputs.instruction_coverage || 'N/A' }} |
          | Branches | ${{ needs.build-and-attest.outputs.branch_coverage || 'N/A' }} |
          | Lines | ${{ needs.build-and-attest.outputs.line_coverage || 'N/A' }} |
          
          ## 🔒 Security Attestations
          
          This release includes comprehensive security attestations and provenance information:
          
          ### 📋 Software Bill of Materials (SBOM)
          - **SPDX Format**: sbom.spdx.json
          - **CycloneDX Format**: sbom.cyclonedx.json
          
          ### 🛡️ Security Scanning
          - **Vulnerability Report**: vulnerability-report.json
          - **SARIF Report**: trivy-results.sarif
          
          ### 🔐 Provenance & Attestations
          - **SLSA Provenance**: *.intoto.jsonl (SLSA Level 3)
          - **Build Metadata**: build-metadata.json
          - **Artifact Hashes**: *.sha256
          
          ### ✍️ Code Signing
          - All artifacts are signed with GPG
          - Signature files: *.asc
          
          ## 📦 Release Artifacts
          
          **Main Artifacts:**
          - JAR: ghrelasset-wagon-*.jar
          - Sources: ghrelasset-wagon-*-sources.jar
          - Javadoc: ghrelasset-wagon-*-javadoc.jar
          - POM: ghrelasset-wagon-*.pom
          
          **Attestation Artifacts:**
          - sbom.spdx.json - SPDX Software Bill of Materials
          - sbom.cyclonedx.json - CycloneDX Software Bill of Materials
          - vulnerability-report.json - Security vulnerability report
          - build-metadata.json - Build environment metadata
          - *.sha256 - SHA-256 checksums
          - *.asc - GPG signatures
          
          ## 🔍 Verification
          
          See the attached VERIFICATION.md file for detailed instructions on verifying GPG signatures, SHA256 hashes, SLSA provenance, and scanning SBOMs for vulnerabilities.
          
          ## 🏗️ Build Environment
          
          - **Runner OS:** ubuntu-latest
          - **Build Actor:** ${{ github.actor }}
          - **Repository:** ${{ github.repository }}
          - **Event:** ${{ github.event_name }}
          
          All attestations are also available in Maven Central alongside the published artifacts.
          
          For detailed information about security attestations, see [Security Attestations Documentation](docs/SECURITY_ATTESTATIONS.md).
