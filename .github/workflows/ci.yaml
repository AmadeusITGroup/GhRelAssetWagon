name: Continuous Integration Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - 'LICENSE'
      - '*.md'
      - '*.adoc'
      - '*.txt'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - 'LICENSE'
      - '*.md'
      - '*.adoc'
      - '*.txt'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]
    name: Build with Java ${{ matrix.java-version }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Checkout
        uses: actions/checkout@v4

      - name: Java setup
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin

      - name: Build and Test with Maven
        env:
          GH_RELEASE_ASSET_TOKEN: test_token
        run: |
          echo "🚀 Running Maven build and tests..."
          mvn -B clean verify -Dgpg.skip=true
          echo "✅ Build completed successfully"

      - name: Parse Test Results
        id: test-results
        if: always()
        run: |
          # Parse surefire test results
          if [ -d "target/surefire-reports" ]; then
            total_tests=0
            failed_tests=0
            error_tests=0
            skipped_tests=0

            for xml_file in target/surefire-reports/TEST-*.xml; do
              if [ -f "$xml_file" ]; then
                tests=$(xmllint --xpath "string(/testsuite/@tests)" "$xml_file" 2>/dev/null || echo "0")
                failures=$(xmllint --xpath "string(/testsuite/@failures)" "$xml_file" 2>/dev/null || echo "0")
                errors=$(xmllint --xpath "string(/testsuite/@errors)" "$xml_file" 2>/dev/null || echo "0")
                skipped=$(xmllint --xpath "string(/testsuite/@skipped)" "$xml_file" 2>/dev/null || echo "0")

                total_tests=$((total_tests + tests))
                failed_tests=$((failed_tests + failures))
                error_tests=$((error_tests + errors))
                skipped_tests=$((skipped_tests + skipped))
              fi
            done

            passed_tests=$((total_tests - failed_tests - error_tests - skipped_tests))

            echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
            echo "passed_tests=$passed_tests" >> $GITHUB_OUTPUT
            echo "failed_tests=$failed_tests" >> $GITHUB_OUTPUT
            echo "error_tests=$error_tests" >> $GITHUB_OUTPUT
            echo "skipped_tests=$skipped_tests" >> $GITHUB_OUTPUT

            # Calculate success rate
            if [ $total_tests -gt 0 ]; then
              success_rate=$(echo "scale=2; $passed_tests * 100 / $total_tests" | bc -l)
              echo "success_rate=${success_rate}%" >> $GITHUB_OUTPUT
            else
              echo "success_rate=0%" >> $GITHUB_OUTPUT
            fi
          else
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "passed_tests=0" >> $GITHUB_OUTPUT
            echo "failed_tests=0" >> $GITHUB_OUTPUT
            echo "error_tests=0" >> $GITHUB_OUTPUT
            echo "skipped_tests=0" >> $GITHUB_OUTPUT
            echo "success_rate=0%" >> $GITHUB_OUTPUT
          fi

      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-java-${{ matrix.java-version }}
          path: |
            target/surefire-reports/
            target/site/jacoco/
            target/*.jar
            sbom.spdx.json
            trivy-results.sarif
          retention-days: 30

      - name: Parse test results and generate summary
        run: |
          echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse test results
          if [ -f "target/surefire-reports/TEST-*.xml" ]; then
            TOTAL_TESTS=$(xmllint --xpath "sum(//testsuite/@tests)" target/surefire-reports/TEST-*.xml)
            FAILURES=$(xmllint --xpath "sum(//testsuite/@failures)" target/surefire-reports/TEST-*.xml)
            ERRORS=$(xmllint --xpath "sum(//testsuite/@errors)" target/surefire-reports/TEST-*.xml)
            SKIPPED=$(xmllint --xpath "sum(//testsuite/@skipped)" target/surefire-reports/TEST-*.xml)
            SUCCESS_RATE=$(echo "scale=1; ($TOTAL_TESTS - $FAILURES - $ERRORS) * 100 / $TOTAL_TESTS" | bc -l)
            
            echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | $TOTAL_TESTS |" >> $GITHUB_STEP_SUMMARY
            echo "| Passed | $(($TOTAL_TESTS - $FAILURES - $ERRORS)) |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed | $FAILURES |" >> $GITHUB_STEP_SUMMARY
            echo "| Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
            echo "| Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
            echo "| Success Rate | ${SUCCESS_RATE}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Parse JaCoCo coverage results
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            # Extract the final summary counters (last occurrence of each type)
            INSTRUCTION_COVERED=$(grep -o '<counter type="INSTRUCTION" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/')
            INSTRUCTION_MISSED=$(grep -o '<counter type="INSTRUCTION" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/')
            BRANCH_COVERED=$(grep -o '<counter type="BRANCH" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/')
            BRANCH_MISSED=$(grep -o '<counter type="BRANCH" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/')
            LINE_COVERED=$(grep -o '<counter type="LINE" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/')
            LINE_MISSED=$(grep -o '<counter type="LINE" missed="[0-9]*" covered="[0-9]*"/>' target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/')
            
            # Calculate totals and percentages
            INSTRUCTION_TOTAL=$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))
            BRANCH_TOTAL=$((BRANCH_COVERED + BRANCH_MISSED))
            LINE_TOTAL=$((LINE_COVERED + LINE_MISSED))
            
            INSTRUCTION_PCT=$(echo "scale=1; $INSTRUCTION_COVERED * 100 / $INSTRUCTION_TOTAL" | bc -l)
            BRANCH_PCT=$(echo "scale=1; $BRANCH_COVERED * 100 / $BRANCH_TOTAL" | bc -l)
            LINE_PCT=$(echo "scale=1; $LINE_COVERED * 100 / $LINE_TOTAL" | bc -l)
            
            echo "### 📈 Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "| Coverage Type | Covered | Total | Percentage |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------|---------|-------|------------|" >> $GITHUB_STEP_SUMMARY
            echo "| Instructions | $INSTRUCTION_COVERED | $INSTRUCTION_TOTAL | ${INSTRUCTION_PCT}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | $BRANCH_COVERED | $BRANCH_TOTAL | ${BRANCH_PCT}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | $LINE_COVERED | $LINE_TOTAL | ${LINE_PCT}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "trivy-results.sarif" ]; then
            echo "- ✅ Trivy vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- 📄 SARIF report uploaded to Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Trivy scan results not found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- JAR: \`ghrelasset-wagon-0.0.1.jar\`" >> $GITHUB_STEP_SUMMARY
          echo "- Sources: \`ghrelasset-wagon-0.0.1-sources.jar\`" >> $GITHUB_STEP_SUMMARY
          echo "- Javadoc: \`ghrelasset-wagon-0.0.1-javadoc.jar\`" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM: \`sbom.spdx.json\`" >> $GITHUB_STEP_SUMMARY
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "- Coverage Report: \`target/site/jacoco/\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🏗️ Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Java Version: ${{ matrix.java-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Runner OS: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
          echo "- Maven Version: \$(mvn --version | head -1)" >> $GITHUB_STEP_SUMMARY
