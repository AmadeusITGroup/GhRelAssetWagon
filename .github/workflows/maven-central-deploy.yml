name: Deploy to Maven Central

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (validate only, do not publish)'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        settings-path: ${{ github.workspace }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Create GPG directory and set permissions
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        
        # Import the GPG key
        echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
        
        # List keys to verify import and get key ID
        echo "Imported GPG keys:"
        gpg --list-secret-keys --keyid-format LONG
        
        # Get the key ID and set it as default
        KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\).*/\1/')
        echo "Using GPG key ID: $KEY_ID"
        echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
        
        # Set ultimate trust for the imported key to avoid signature validation issues
        echo "$KEY_ID:6:" | gpg --batch --import-ownertrust
        
        # Verify key trust
        gpg --list-keys --with-colons | grep "^pub" | head -1
        
        # Configure GPG for non-interactive use
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        echo "no-tty" >> ~/.gnupg/gpg.conf
        echo "default-key $KEY_ID" >> ~/.gnupg/gpg.conf
        
        # Configure GPG agent
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "default-cache-ttl 86400" >> ~/.gnupg/gpg-agent.conf
        echo "max-cache-ttl 86400" >> ~/.gnupg/gpg-agent.conf
        
        # Set proper permissions
        chmod 600 ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg-agent.conf
        
        # Restart GPG agent
        gpg-connect-agent reloadagent /bye || true
        
        # Test signing with the exact same parameters Maven will use
        echo "test" | gpg --detach-sign --armor --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --default-key "$KEY_ID" --output /tmp/test.asc
        
        # Verify the test signature
        gpg --verify /tmp/test.asc
        echo "GPG signing test successful - signature verified"
        
        # Export public key for verification (useful for debugging)
        gpg --armor --export "$KEY_ID" > /tmp/public_key.asc
        echo "Public key exported for verification"
        
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
    - name: Run tests
      env:
        GH_RELEASE_ASSET_TOKEN: test_token
      run: mvn clean test
      
    - name: Debug Maven settings
      run: |
        echo "Maven settings location: ${{ github.workspace }}/settings.xml"
        if [ -f "${{ github.workspace }}/settings.xml" ]; then
          echo "Settings.xml exists"
          # Show structure without revealing credentials
          xmllint --format "${{ github.workspace }}/settings.xml" | grep -E "(server|id)" || echo "No servers found"
        else
          echo "Settings.xml not found"
        fi
      
    - name: Verify build
      run: mvn clean verify -DskipTests
      
    - name: Debug GPG signatures
      run: |
        echo "üîç Verifying GPG signatures were created correctly..."
        ls -la target/*.asc || echo "No .asc files found"
        
        # Verify each signature file
        for asc_file in target/*.asc; do
          if [ -f "$asc_file" ]; then
            echo "Verifying signature: $asc_file"
            gpg --verify "$asc_file" || echo "Signature verification failed for $asc_file"
          fi
        done
      
    - name: Deploy to Maven Central (Dry Run)
      if: ${{ github.event.inputs.dry_run == 'true' }}
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_KEYNAME: ${{ env.GPG_KEY_ID || 'auto' }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "üîç Performing dry run - validating artifacts without publishing"
        echo "üìã Checking required secrets..."
        if [ -z "$MAVEN_USERNAME" ]; then
          echo "‚ùå ERROR: OSSRH_USERNAME secret is not configured"
          echo "Please configure the following repository secrets:"
          echo "- OSSRH_USERNAME: Your Sonatype OSSRH username"
          echo "- OSSRH_TOKEN: Your Sonatype OSSRH token"
          echo "- GPG_PRIVATE_KEY: Your GPG private key"
          echo "- GPG_PASSPHRASE: Your GPG key passphrase"
          exit 1
        fi
        if [ -z "$MAVEN_PASSWORD" ]; then
          echo "‚ùå ERROR: OSSRH_TOKEN secret is not configured"
          exit 1
        fi
        echo "‚úÖ Required secrets are configured"
        mvn clean deploy -DskipTests -Dcentral.autoPublish=false -Dgpg.skip=false -s ${{ github.workspace }}/settings.xml
        echo "‚úÖ Dry run completed successfully - artifacts validated and signed"
        
    - name: Deploy to Maven Central
      if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_KEYNAME: ${{ env.GPG_KEY_ID || 'auto' }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "üöÄ Deploying to Maven Central..."
        mvn clean deploy -DskipTests -Dgpg.skip=false -s ${{ github.workspace }}/settings.xml
        echo "‚úÖ Deployment completed successfully"
        
    - name: Manual Deploy (Workflow Dispatch)
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false' }}
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_KEYNAME: ${{ env.GPG_KEY_ID || 'auto' }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "üöÄ Manual deployment to Maven Central..."
        mvn clean deploy -DskipTests -Dgpg.skip=false -s ${{ github.workspace }}/settings.xml
        echo "‚úÖ Manual deployment completed successfully"
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: maven-artifacts
        path: |
          target/*.jar
          target/*.pom
          target/*.asc
        retention-days: 30
